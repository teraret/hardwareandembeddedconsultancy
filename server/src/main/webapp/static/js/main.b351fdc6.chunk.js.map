{"version":3,"sources":["images/hadwareandembeddedconsultancy.svg","images/buy.svg","images/sell.svg","images/repair.svg","component/NavDropdownItem.js","AppNav.js","App.js","config.js","redux/customer/customerActions.js","redux/customer/customerType.js","redux/customer/customerCreateActions.js","redux/customer/customerCreateType.js","page/customer/CustomerForm.js","page/customer/Customer.js","component/SearchAutoCompleteAdd.js","page/customer/CustomerSearch.js","Footer.js","redux/customer/customerReducer.js","redux/customer/customerCreateReducer.js","redux/rootReducers.js","redux/store.js","index.js"],"names":["module","exports","NavDropdownItem","props","tag","href","children","AppNav","collapse","toggle","style","backgroundColor","borderRadius","dark","expand","className","src","Logo","alt","width","onClick","isOpen","navbar","nav","inNavbar","caret","right","App","state","setState","key","id","textAlign","Component","console","log","process","pjson","version","dependencies","react","fetchCustomersRequest","type","fetchCustomer","authorization","sort","order","max","offset","dispatch","Axios","get","CUSTOMER_URL","headers","Authorization","then","response","customer","data","payload","customers","payloadcount","count","payloadpage","page","payloadtotalpages","totalpages","payloadmax","payloadorder","payloadsort","payloadoffset","fetchCustomerSuccess","catch","error","errorMsg","message","fetchCustomerFailure","fetchCustomerRequest","showCustomerSuccess","createCustomer","value","post","total","errorValue","i","_embedded","errors","showCustomerFailure","customerCreateSchema","yup","shape","name","required","email","mobile","min","address","useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","color","palette","text","secondary","CustomerForm","classes","useDispatch","useEffect","refresh","useSelector","customerCreate","show","useState","result","setResult","done","Grid","container","direction","justify","alignItems","Paper","initialValues","company","validationSchema","onSubmit","values","setSubmitting","setTimeout","submitForm","isSubmitting","handleChange","resetForm","touched","item","xs","sm","md","TextField","label","margin","autoComplete","onChange","placeholder","InputLabelProps","shrink","InputProps","startAdornment","InputAdornment","position","variant","helperText","LinearProgress","ButtonGroup","Button","size","disabled","Collapse","in","Alert","severity","Object","keys","length","marginBottom","breakpoints","down","display","up","title","fontSize","table","minWidth","content","StyledTableCell","withStyles","head","common","default","black","body","TableCell","StyledTableRow","background","TableRow","Customer","customerdata","React","setPage","rowsPerPage","setRowsPerPage","handleChangePage","event","newPage","handleChangeRowsPerPage","parseInt","target","loading","JSON","parse","localStorage","auth","access_token","TablePagination","rowsPerPageOptions","component","onChangePage","onChangeRowsPerPage","TableContainer","Table","aria-label","TableHead","TableSortLabel","TableBody","map","scope","dateCreated","lastUpdated","IconButton","filter","createFilterOptions","SearchAutoCompleteAdd","options","Autocomplete","filterOptions","params","filtered","inputValue","push","selectOnFocus","clearOnBlur","handleHomeEndKeys","getOptionLabel","option","renderOption","fullWidth","freeSolo","renderInput","CustomerSearch","customerList","setFieldValue","toString","newValue","FormControl","InputLabel","Select","labelId","isSearchable","MenuItem","e","Footer","rel","advancedgrails","documentation","slack","initialState","customerReducer","action","customerCreateReducer","rootReducer","combineReducers","store","createStore","rootReducers","composeWithDevTools","applyMiddleware","logger","thunk","ReactDOM","render","setCollapse","exact","path","document","getElementById"],"mappings":"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","file":"static/js/main.b351fdc6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hadwareandembeddedconsultancy.9b261978.svg\";","module.exports = __webpack_public_path__ + \"static/media/buy.017e8bd6.svg\";","module.exports = __webpack_public_path__ + \"static/media/sell.759a8ebe.svg\";","module.exports = __webpack_public_path__ + \"static/media/repair.1094fa34.svg\";","import React from \"react\";\nimport { DropdownItem, NavLink } from \"reactstrap\";\n\nfunction NavDropdownItem(props) {\n  return (\n    <DropdownItem tag=\"li\">\n      <NavLink href={props.href}>{props.children}</NavLink>\n    </DropdownItem>\n  );\n}\n\nexport default NavDropdownItem;\n","import React from \"react\";\nimport {\n  Collapse,\n  DropdownMenu,\n  DropdownToggle,\n  Nav,\n  Navbar,\n  NavbarBrand,\n  NavbarToggler,\n  UncontrolledDropdown,\n} from \"reactstrap\";\n\nimport NavDropdownItem from \"./component/NavDropdownItem\";\nimport Logo from \"./images/hadwareandembeddedconsultancy.svg\";\n\n\nconst AppNav = ({ collapse, toggle }) => {\n  return (\n    <Navbar\n      style={{ backgroundColor: \"#4d85bd\", borderRadius: 0 }}\n      dark\n      expand=\"lg\"\n      className=\"navbar-static-top\"\n    >\n      <NavbarBrand href=\"/#/\">\n        <img src={Logo} alt=\"Hardware and Embedded Consultancy\" width=\"240\" />\n      </NavbarBrand>\n      <NavbarToggler onClick={toggle} />\n\n      <Collapse isOpen={collapse} navbar>\n        <Nav className=\"ml-auto nav\" navbar>\n          <UncontrolledDropdown nav inNavbar>\n            <DropdownToggle caret nav>\n              POS\n            </DropdownToggle>\n            <DropdownMenu right tag=\"ul\">\n              <NavDropdownItem href=\"/#/customer\">Customer</NavDropdownItem>\n            </DropdownMenu>\n          </UncontrolledDropdown>\n        </Nav>\n      </Collapse>\n    </Navbar>\n  );\n};\n\nexport default AppNav;\n","import React, { Component } from \"react\";\nimport { Row } from \"reactstrap\";\nimport \"whatwg-fetch\";\n\nclass App extends Component {\n  state = {\n    collapse: false,\n  };\n\n  toggle = () => {\n    this.setState({ collapse: !!this.state.collapse });\n  };\n\n  render() {\n    return [\n      <div className=\"grails-logo-container\" key={1}>\n        <img\n          className=\"grails-logo\"\n          src=\"https://source.unsplash.com/1600x900/?digital\"\n          alt=\"Grails\"\n        />\n      </div>,\n\n      <Row key={2}>\n        <div id=\"content\">\n          <section className=\"row colset-2-its\">\n            <h1 style={{ textAlign: \"center\" }}>\n              Welcome to Hardware and Embedded Consultancy\n            </h1>\n            <br />\n            <p>\n              Hardware and embedded consultancy by Teraret is Computer Hardware\n              Repair and Reseller Based In Banglore and Chennai. We are\n              Specialised in Computer Assembly, Server Assembly, Internet\n              Network Setup. We also Buy ,Rent and Sell\n              Laptops,Desktops,Projectors and Servers\n            </p>\n          </section>\n        </div>\n      </Row>,\n    ];\n  }\n}\n\nexport default App;\n","import pjson from \"./../package.json\";\n\nconst prod = process.env.NODE_ENV === 'production';  \n\nconsole.log(`Loading ${process.env.NODE_ENV} config...`);\n\nexport const SERVER_URL = prod ? '' : 'http://localhost:8080';\nexport const CUSTOMER_URL = SERVER_URL + \"/api/customer\";\nexport const CLIENT_VERSION = pjson.version;\nexport const REACT_VERSION = pjson.dependencies.react;\n","import {\n  FETCH_CUSTOMERS_REQUEST,\n  FETCH_CUSTOMERS_SUCCESS,\n  FETCH_CUSTOMERS_FAILURE,\n} from \"./customerType\";\nimport Axios from \"axios\";\nimport { CUSTOMER_URL } from \"./../../config\";\n\nconst fetchCustomersRequest = () => {\n  return {\n    type: FETCH_CUSTOMERS_REQUEST,\n  };\n};\n\nconst fetchCustomerSuccess = (customer, max, order, sort, offset) => {\n  return {\n    type: FETCH_CUSTOMERS_SUCCESS,\n    payload: customer.customers,\n    payloadcount: customer.count,\n    payloadpage: customer.page,\n    payloadtotalpages: customer.totalpages,\n    payloadmax: max,\n    payloadorder: order,\n    payloadsort: sort,\n    payloadoffset: offset,\n  };\n};\n\nconst fetchCustomerFailure = (error) => {\n  return {\n    type: FETCH_CUSTOMERS_FAILURE,\n    payload: error,\n  };\n};\n\nexport const fetchCustomer = (authorization, sort, order, max, offset) => {\n  return (dispatch) => {\n    dispatch(fetchCustomersRequest);\n    Axios.get(\n      CUSTOMER_URL +\n        \"?max=\" +\n        max +\n        \"&offset=\" +\n        offset +\n        \"&order=\" +\n        order +\n        \"&sort=\" +\n        sort,\n      {\n        headers: {\n          Authorization: \"Bearer \" + authorization,\n        },\n      }\n    )\n      .then((response) => {\n        const customer = response.data;\n        dispatch(fetchCustomerSuccess(customer, max, order, sort, offset));\n      })\n      .catch((error) => {\n        const errorMsg = error.message;\n        dispatch(fetchCustomerFailure(errorMsg));\n      });\n  };\n};\n","export const FETCH_CUSTOMERS_REQUEST = \"FETCH_CUSTOMERS_REQUEST\";\nexport const FETCH_CUSTOMERS_SUCCESS = \"FETCH_CUSTOMERS_SUCCESS\";\nexport const FETCH_CUSTOMERS_FAILURE = \"FETCH_CUSTOMERS_FAILURE\";\n","import {\n  FETCH_CUSTOMER_REQUEST,\n  FETCH_CUSTOMER_SUCCESS,\n  FETCH_CUSTOMER_FAILURE,\n} from \"./customerCreateType\";\n\nimport Axios from \"axios\";\nimport { SERVER_URL } from \"./../../config\";\n\nconst fetchCustomerRequest = () => {\n  return {\n    type: FETCH_CUSTOMER_REQUEST,\n  };\n};\n\nconst showCustomerSuccess = (customer) => {\n  return {\n    type: FETCH_CUSTOMER_SUCCESS,\n    payload: customer,\n  };\n};\nconst showCustomerFailure = (error) => {\n  return {\n    type: FETCH_CUSTOMER_FAILURE,\n    payload: error,\n  };\n};\n\nexport const createCustomer = (value) => {\n  return (dispatch) => {\n    dispatch(fetchCustomerRequest);\n    Axios.post(SERVER_URL + \"/customer\", value)\n      .then((response) => {\n        console.log(response);\n        console.log(response.data);\n        dispatch(showCustomerSuccess(response.data));\n      })\n      .catch((error) => {\n        console.error(\"The Error Message is \" + error.response.data.total);\n        let errorValue = \"\";\n        if (typeof error.response.data.total === \"undefined\") {\n          errorValue = \"\";\n          errorValue += error.response.data.message;\n        } else {\n          errorValue = \"Errors Are \";\n          for (let i = 0; i < error.response.data.total; i++) {\n            errorValue += error.response.data._embedded.errors[i].message;\n          }\n        }\n        dispatch(showCustomerFailure(errorValue));\n      });\n  };\n};\n\nexport const showCustomer = (id) => {\n  return (dispatch) => {\n    dispatch(fetchCustomerRequest);\n    Axios.get(SERVER_URL + \"/customer/\" + id).then((response) => {\n      console.log(response);\n      console.log(response.data);\n      dispatch(showCustomerSuccess(response.data));\n    });\n  };\n};\n\nexport const editCustomer = (id, value) => {\n  return (dispatch) => {\n    dispatch(fetchCustomerRequest);\n    Axios.put(SERVER_URL + \"/customer/\" + id, value).then((response) => {\n      console.log(response);\n      console.log(response.data);\n      dispatch(showCustomerSuccess(response.data));\n    });\n  };\n};\n\nexport const deleteCustomer = (id) => {\n  return (dispatch) => {\n    Axios.delete(SERVER_URL + \"/customer/\" + id);\n  };\n};\n","export const FETCH_CUSTOMER_REQUEST = \"FETCH_CUSTOMER_REQUEST\";\nexport const FETCH_CUSTOMER_SUCCESS = \"FETCH_CUSTOMER_SUCCESS\";\nexport const FETCH_CUSTOMER_FAILURE = \"FETCH_CUSTOMER_FAILURE\";\n","import React, { useState,useEffect } from \"react\";\nimport { fetchCustomer } from \"./../../redux/index\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { Button, ButtonGroup, LinearProgress } from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport PhoneAndroid from \"@material-ui/icons/PhoneAndroid\";\nimport Email from \"@material-ui/icons/Email\";\nimport Home from \"@material-ui/icons/Home\";\nimport Business from \"@material-ui/icons/Business\";\nimport Contacts from \"@material-ui/icons/Contacts\";\nimport { Formik, Form, Field } from \"formik\";\nimport { createCustomer } from \"./../../redux/index\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as yup from \"yup\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport Collapse from \"@material-ui/core/Collapse\";\n\nlet customerCreateSchema = yup.object().shape({\n  name: yup.string().required(\"This field is required.\"),\n  email: yup.string().email().required(\"This field is required.\"),\n  mobile: yup\n    .string()\n    .min(10, \"Mobile is too short.\")\n    .max(10, \"Mobile is too long.\")\n    .required(\"This field is required.\"),\n  address: yup.string(),\n});\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n}));\n\n\nfunction CustomerForm(props) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    refresh();\n  }, []);\n\n  const refresh = () => {\n    dispatch(\n      fetchCustomer(null,\"id\" , \"asc\", \"all\", 0)\n    );\n  };\n\n  const customerList = useSelector((state) => state.customerCreate);\n  const customerdata = useSelector((state) => state.customerCreate);\n  const error = useSelector((state) => state.customerCreate.error);\n  const show = useSelector((state) => state.customerCreate.show);\n  const [result, setResult] = useState(false);\n \n  const [value, setValue] = useState(null);\n\n  const initialValues = {\n    id:\"\",\n    company:\"\",\n    name: \"\",\n    email: \"\",\n    mobile: \"\",\n    address: \"\",\n  };\n\n  const done = () => {\n    setResult(false);\n    props.refresh();\n  };\n\n  return (\n    <div className={classes.root}>\n      <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n        <Paper className={classes.paper}>\n          <Formik\n            initialValues={initialValues}\n            validationSchema={customerCreateSchema}\n            onSubmit={(values, { setSubmitting }) => {\n              setTimeout(() => {\n                dispatch(createCustomer(values));\n                setSubmitting(false);\n                setResult(true);\n              }, 2000);\n\n            }}\n          >\n            {({\n              submitForm,\n              isSubmitting,\n              handleChange,\n              resetForm,\n              touched,\n              errors,\n              values,\n            }) => (\n              <Form>\n                <Grid container  justify=\"center\" alignItems=\"center\" item xs={12}>\n               \n                \n                 \n\n\n                  \n                <Grid item sm={12} md={2}>\n\n                <TextField\n                    name=\"id\"\n                    label=\"CUSTOMER ID\"\n                    style={{ margin: 8 }}\n                    autoComplete=\"new-password\"\n                    value={values.id || \"\"}\n                    onChange={handleChange}\n                    placeholder=\"ID\"\n                    margin=\"normal\"\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    InputProps={{\n                      startAdornment: (\n                        <InputAdornment position=\"start\">\n                          <Contacts />\n                        </InputAdornment>\n                      ),\n                    }}\n                    variant=\"outlined\"\n                    helperText={errors.id && touched.id ? errors.id : null}\n                  />\n               </Grid>\n               \n\n\n\n<Grid item sm={12} md={2}>\n                  <TextField\n                    id=\"outlined-full-width\"\n                    name=\"company\"\n                    label=\"COMPANY\"\n                    autoComplete=\"new-password\"\n                    value={values.company || \"\"}\n                    onChange={handleChange}\n                    style={{ margin: 8 }}\n                    placeholder=\"COMPANY\"\n                    margin=\"normal\"\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    InputProps={{\n                      startAdornment: (\n                        <InputAdornment position=\"start\">\n                          <Business />\n                        </InputAdornment>\n                      ),\n                    }}\n                    variant=\"outlined\"\n                    helperText={errors.company && touched.company ? errors.company : null}\n                  />\n                  </Grid>\n                  <Grid item sm={12} md={2}>\n                  <TextField\n                    id=\"outlined-full-width\"\n                    name=\"name\"\n                    label=\"Name\"\n                    autoComplete=\"new-password\"\n                    value={values.name || \"\"}\n                    onChange={handleChange}\n                    style={{ margin: 8 }}\n                    placeholder=\"Name\"\n                    margin=\"normal\"\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    InputProps={{\n                      startAdornment: (\n                        <InputAdornment position=\"start\">\n                          <Contacts />\n                        </InputAdornment>\n                      ),\n                    }}\n                    variant=\"outlined\"\n                    helperText={\n                      errors.name && touched.name ? errors.name : null\n                    }\n                  />\n                  </Grid>\n                  <Grid item sm={12} md={2}>\n                  <TextField\n                    id=\"outlined-full-width\"\n                    name=\"email\"\n                    label=\"Email\"\n                    autoComplete=\"new-password\"\n                    value={values.email || \"\"}\n                    onChange={handleChange}\n                    style={{ margin: 8 }}\n                    placeholder=\"E-Mail\"\n                    margin=\"normal\"\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    InputProps={{\n                      startAdornment: (\n                        <InputAdornment position=\"start\">\n                          <Email />\n                        </InputAdornment>\n                      ),\n                    }}\n                    variant=\"outlined\"\n                    helperText={\n                      errors.email && touched.email ? errors.email : null\n                    }\n                  />\n                  </Grid>\n                  <Grid item sm={12} md={2}>\n                  <TextField\n                    id=\"outlined-full-width\"\n                    label=\"Mobile\"\n                    name=\"mobile\"\n                    autoComplete=\"new-password\"\n                    value={values.mobile || \"\"}\n                    onChange={handleChange}\n                    style={{ margin: 8 }}\n                    type=\"number\"\n                    placeholder=\"Mobile\"\n                    margin=\"normal\"\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    InputProps={{\n                      startAdornment: (\n                        <InputAdornment position=\"start\">\n                          <PhoneAndroid />\n                        </InputAdornment>\n                      ),\n                    }}\n                    variant=\"outlined\"\n                    helperText={\n                      errors.mobile && touched.mobile ? errors.mobile : null\n                    }\n                  />\n                  </Grid>\n                  <Grid item sm={12} md={2}>\n                  <TextField\n                    id=\"outlined-full-width\"\n                    label=\"Address\"\n                    name=\"address\"\n                    value={values.address || \"\"}\n                    onChange={handleChange}\n                    style={{ margin: 8 }}\n                    placeholder=\"Address\"\n                    margin=\"normal\"\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    InputProps={{\n                      startAdornment: (\n                        <InputAdornment position=\"start\">\n                          <Home />\n                        </InputAdornment>\n                      ),\n                    }}\n                    variant=\"outlined\"\n                    helperText={\n                      errors.address && touched.address ? errors.address : null\n                    }\n                  />\n                  </Grid>\n\n                 \n                </Grid>\n                <Grid item xs={12}>\n                  {isSubmitting && <LinearProgress />}\n                  <ButtonGroup>\n                    <Button\n                      variant=\"contained\"\n                      size=\"large\"\n                      color=\"primary\"\n                      disabled={isSubmitting}\n                      onClick={submitForm}\n                    >\n                      Save\n                    </Button>\n                    <Button\n                      variant=\"contained\"\n                      size=\"large\"\n                      color=\"secondary\"\n                      onClick={resetForm}\n                    >\n                      Reset\n                    </Button>\n                  </ButtonGroup>\n                </Grid>\n                {error ? (\n                  <Collapse in={result}>\n                    <Alert severity=\"error\">\n                      <Grid\n                        container\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"center\"\n                      >\n                        {error} <Button onClick={done}>ok</Button>\n                      </Grid>\n                    </Alert>\n                  </Collapse>\n                ) : null}\n                {Object.keys(show).length > 0 ? (\n                  <Collapse in={result}>\n                    <Alert>\n                      <Grid\n                        container\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"center\"\n                      >\n                        {show.id ? (\n                          <Grid item xs={12}>\n                            Id {show.id} Created\n                          </Grid>\n                        ) : null}\n                        {show.name ? (\n                          <Grid item xs={12}>\n                            Name:{show.name}\n                          </Grid>\n                        ) : null}\n                        {show.email ? (\n                          <Grid item xs={12}>\n                            E-Mail:{show.email}\n                          </Grid>\n                        ) : null}\n                        {show.mobile ? (\n                          <Grid item xs={12}>\n                            Mobile:{show.mobile}\n                          </Grid>\n                        ) : null}\n                        {show.address ? (\n                          <Grid item xs={12}>\n                            Address:{show.address}\n                          </Grid>\n                        ) : null}\n                        {show.id ? (\n                          <Grid item xs={12}>\n                            <Button\n                              onClick={() => {\n                                resetForm();\n                                done();\n                              }}\n                            >\n                              ok\n                            </Button>\n                          </Grid>\n                        ) : null}\n                      </Grid>\n                    </Alert>\n                  </Collapse>\n                ) : null}\n              </Form>\n            )}\n          </Formik>\n        </Paper>\n      </Grid>\n    </div>\n  );\n}\n\nexport default CustomerForm;\n","import React, { useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles, withStyles } from \"@material-ui/core\";\nimport { fetchCustomer } from \"./../../redux/index\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport ReceiptIcon from \"@material-ui/icons/Receipt\";\nimport ShoppingCartIcon from \"@material-ui/icons/ShoppingCart\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { LinearProgress } from \"@material-ui/core\";\nimport CustomerForm from \"./CustomerForm\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& > * + * .MuiTextField-root \": {\n      margin: theme.spacing(1),\n      marginBottom: 12,\n\n      [theme.breakpoints.down(\"sm\")]: {\n        width: \"100%\",\n        display: \"Center\",\n      },\n      [theme.breakpoints.up(\"md\")]: {\n        width: \"100%\",\n        justify: \"center\",\n      },\n      [theme.breakpoints.up(\"lg\")]: {\n        width: 305,\n        display: \"Center\",\n      },\n    },\n    display: \"flex\",\n  },\n  title: {\n    fontSize: 18,\n  },\n  table: {\n    minWidth: 700,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(1, 0),\n  },\n}));\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.common.default,\n    color: theme.palette.common.black,\n    size: \"small\",\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nconst StyledTableRow = withStyles((theme) => ({\n  root: {\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: theme.palette.background.default,\n    },\n  },\n}))(TableRow);\n\nfunction Customer() {\n  const classes = useStyles();\n  const customerdata = useSelector((state) => state.customer);\n\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(customerdata.max);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    refresh();\n  }, []);\n\n  const refresh = () => {\n    dispatch(\n      fetchCustomer(null, customerdata.sort, customerdata.order, rowsPerPage, 0)\n    );\n  };\n\n  const handleChangePage = (event, newPage) => {\n    dispatch(\n      fetchCustomer(\n        null,\n        customerdata.sort,\n        customerdata.order,\n        rowsPerPage,\n        newPage * rowsPerPage\n      )\n    );\n\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    dispatch(\n      fetchCustomer(\n        null,\n        customerdata.sort,\n        customerdata.order,\n        parseInt(event.target.value, 10),\n        0\n      )\n    );\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return customerdata.loading ? (\n    <div className={classes.root}>\n      <LinearProgress />\n    </div>\n  ) : customerdata.error ? (\n    <h1>\n      {customerdata.error} {JSON.parse(localStorage.auth).data.access_token}\n    </h1>\n  ) : (\n    <div>\n      <Grid item sm={12} md={12} className={classes.content}>\n        <CustomerForm refresh={refresh} />\n        <TablePagination\n\n          rowsPerPageOptions={[10, 25, parseInt(customerdata.count)]}\n          component=\"div\"\n          count={customerdata.count}\n          rowsPerPage={rowsPerPage}\n          page={customerdata.page - 1}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n        <TableContainer component={Paper}>\n          <Table className={classes.table} aria-label=\"customized table\">\n            <TableHead>\n              <TableRow>\n                <StyledTableCell key=\"id\">\n                  <TableSortLabel\n                    direction={customerdata.order === \"desc\" ? \"asc\" : \"desc\"}\n                    onClick={() =>\n                      dispatch(\n                        fetchCustomer(\n                          null,\n                          \"id\",\n                          customerdata.order === \"desc\" ? \"asc\" : \"desc\",\n                          rowsPerPage,\n                          0\n                        )\n                      )\n                    }\n                  >\n                    Customer ID\n                  </TableSortLabel>\n                </StyledTableCell>\n\n                <StyledTableCell key=\"name\">\n                  <TableSortLabel\n                    direction={customerdata.order === \"desc\" ? \"asc\" : \"desc\"}\n                    onClick={() =>\n                      dispatch(\n                        fetchCustomer(\n                          null,\n                          \"name\",\n                          customerdata.order === \"desc\" ? \"asc\" : \"desc\",\n                          rowsPerPage,\n                          0\n                        )\n                      )\n                    }\n                  >\n                    Name\n                  </TableSortLabel>\n                </StyledTableCell>\n\n                <StyledTableCell key=\"email\">\n                  <TableSortLabel\n                    direction={customerdata.order === \"desc\" ? \"asc\" : \"desc\"}\n                    onClick={() =>\n                      dispatch(\n                        fetchCustomer(\n                          null,\n                          \"email\",\n                          customerdata.order === \"desc\" ? \"asc\" : \"desc\",\n                          rowsPerPage,\n                          0\n                        )\n                      )\n                    }\n                  >\n                    E-mail\n                  </TableSortLabel>\n                </StyledTableCell>\n                <StyledTableCell key=\"mobile\">\n                  <TableSortLabel\n                    direction={customerdata.order === \"desc\" ? \"asc\" : \"desc\"}\n                    onClick={() =>\n                      dispatch(\n                        fetchCustomer(\n                          null,\n                          \"mobile\",\n                          customerdata.order === \"desc\" ? \"asc\" : \"desc\",\n                          rowsPerPage,\n                          0\n                        )\n                      )\n                    }\n                  >\n                    Mobile\n                  </TableSortLabel>\n                </StyledTableCell>\n                <StyledTableCell key=\"address\">\n                  <TableSortLabel\n                    direction={customerdata.order === \"desc\" ? \"asc\" : \"desc\"}\n                    onClick={() =>\n                      dispatch(\n                        fetchCustomer(\n                          null,\n                          \"address\",\n                          customerdata.order === \"desc\" ? \"asc\" : \"desc\",\n                          rowsPerPage,\n                          0\n                        )\n                      )\n                    }\n                  >\n                    Address\n                  </TableSortLabel>\n                </StyledTableCell>\n                <StyledTableCell key=\"dateCreated\">\n                  <TableSortLabel\n                    direction={customerdata.order === \"desc\" ? \"asc\" : \"desc\"}\n                    onClick={() =>\n                      dispatch(\n                        fetchCustomer(\n                          null,\n                          \"dateCreated\",\n                          customerdata.order === \"desc\" ? \"asc\" : \"desc\",\n                          rowsPerPage,\n                          0\n                        )\n                      )\n                    }\n                  >\n                    Date Created\n                  </TableSortLabel>\n                </StyledTableCell>\n\n                <StyledTableCell key=\"lastUpdated\">\n                  <TableSortLabel\n                    direction={customerdata.order === \"desc\" ? \"asc\" : \"desc\"}\n                    onClick={() =>\n                      dispatch(\n                        fetchCustomer(\n                          null,\n                          \"lastUpdated\",\n                          customerdata.order === \"desc\" ? \"asc\" : \"desc\",\n                          rowsPerPage,\n                          0\n                        )\n                      )\n                    }\n                  >\n                    Last Updated\n                  </TableSortLabel>\n                </StyledTableCell>\n                <StyledTableCell> Cart </StyledTableCell>\n                <StyledTableCell> Invoices </StyledTableCell>\n                <StyledTableCell> Edit </StyledTableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {customerdata.customers.map((customer) => (\n                <StyledTableRow key={customer.id}>\n                  <StyledTableCell component=\"th\" scope=\"row\">\n                    {customer.id}\n                  </StyledTableCell>\n                  <StyledTableCell component=\"th\" scope=\"row\">\n                    {customer.name}\n                  </StyledTableCell>\n                  <StyledTableCell component=\"th\" scope=\"row\">\n                    {customer.email}\n                  </StyledTableCell>\n                  <StyledTableCell component=\"th\" scope=\"row\">\n                    {customer.mobile}\n                  </StyledTableCell>\n                  <StyledTableCell component=\"th\" scope=\"row\">\n                    {customer.address}\n                  </StyledTableCell>\n                  <StyledTableCell component=\"th\" scope=\"row\">\n                    {customer.dateCreated}\n                  </StyledTableCell>\n                  <StyledTableCell component=\"th\" scope=\"row\">\n                    {customer.lastUpdated}\n                  </StyledTableCell>\n                  <StyledTableCell component=\"th\" scope=\"row\">\n                    <IconButton color=\"secondary\" aria-label=\"Edit customer\">\n                      <ShoppingCartIcon />\n                    </IconButton>\n                  </StyledTableCell>\n                  <StyledTableCell component=\"th\" scope=\"row\">\n                    <IconButton color=\"secondary\" aria-label=\"Edit customer\">\n                      <ReceiptIcon />\n                    </IconButton>\n                  </StyledTableCell>\n                  <StyledTableCell component=\"th\" scope=\"row\">\n                    <IconButton color=\"secondary\" aria-label=\"Edit customer\">\n                      <EditIcon />\n                    </IconButton>\n                  </StyledTableCell>\n                </StyledTableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[10, 25, parseInt(customerdata.count)]}\n          component=\"div\"\n          count={customerdata.count}\n          rowsPerPage={rowsPerPage}\n          page={customerdata.page - 1}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Grid>\n    </div>\n  );\n}\n\nexport default Customer;\n","import React from \"react\";\n\nimport Autocomplete, {\n  createFilterOptions,\n} from \"@material-ui/lab/Autocomplete\";\nimport Business from \"@material-ui/icons/Business\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst filter = createFilterOptions();\n  \nfunction SearchAutoCompleteAdd (props) {\n  const customerdata = props.options\n  \n    return (\n      <div>\n      <Autocomplete\n      id={props.name}\n      name={props.name}\n                    value={props.value}\n\n                    helperText={props.helperText}\n\n                    onChange={props.onChange}\n\n                    filterOptions={(options, params) => {\n                      const filtered = filter(options, params);\n                     \n                      if (params.inputValue !== \"\") {\n                        filtered.push({\n                          inputValue: params.inputValue,\n                          [props.name]: `Add \"${params.inputValue}\"`,\n                        });\n                      }\n\n                      return filtered;\n                    }}\n\n\n\n                    selectOnFocus\n                    clearOnBlur\n                    handleHomeEndKeys\n                 \n                    options={customerdata.customers}\n\n\n                    getOptionLabel={(option) => {\n                      \n                      if (typeof option === \"string\") {\n                        return option;\n                      }\n                      \n                      if (option.inputValue) {\n                        return option.inputValue;\n                      }\n                      \n                      return option[props.name];\n                    }}\n\n\n                    renderOption={(option) => option[props.name]}\n\n                    fullWidth\n\n                    freeSolo\n\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        label={props.label}\n                        variant=\"outlined\"\n                        autoComplete=\"off\"\n                        InputProps={{\n                          ...params.InputProps,\n                          startAdornment: (\n                            <>\n                              <InputAdornment position=\"start\">\n                                <Business />\n                              </InputAdornment>\n                              {params.InputProps.startAdornment}\n                            </>\n                          ),\n                        }}\n                      />\n                    )}\n                  />\n    </div>\n    );\n}\nexport default SearchAutoCompleteAdd;","import React, { useState,useEffect } from \"react\";\nimport { Formik, Form } from \"formik\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Alert from \"@material-ui/lab/Alert\";\nimport {Grid,LinearProgress,ButtonGroup,Button,FormControl,Select,InputLabel,MenuItem,Collapse} from \"@material-ui/core\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchCustomer,createCustomer } from \"./../../redux/index\";\n\nimport Contacts from \"@material-ui/icons/Contacts\";\nimport Home from \"@material-ui/icons/Home\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Searchautocomplete from \"../../component/SearchAutoCompleteAdd\";\nimport * as yup from \"yup\";\n\nlet customerCreateSchema = yup.object().shape({\n  name: yup.string().required(\"This field is required.\"),\n  email: yup.string().email().required(\"This field is required.\"),\n  mobile: yup\n    .string()\n    .min(10, \"Mobile is too short.\")\n    .max(10, \"Mobile is too long.\")\n    .required(\"This field is required.\"),\n  address: yup.string(),\n});\n\n  function CustomerSearch (props) {\n\n  const dispatch = useDispatch();\n    \n  useEffect(() => {\n    refresh();\n  }, []);\n\n  const refresh = () => {\n    dispatch(\n      fetchCustomer(null,\"id\" , \"asc\", \"all\", 0)\n    );\n  };\n\n  const customerList = useSelector((state) => state.customer);\n  const [selectedId, setSelectedId] = useState('');\n  const [selectedCompany, setSelectedCompany] = useState('');\n  const [nameValue, setNameValue] = useState('');\n  const [selectedEmail, setSelectedEmail] = useState('');\n  const [selectedMobile, setSelectedMobile] = useState('');\n  const [addressValue, setAddressValue] = useState('');\n  const [result, setResult] = useState(false);\n  const error = useSelector((state) => state.customerCreate.error);\n\n  const done = () => {\n    setResult(false);\n    props.refresh();\n  };\n  \n  const initialValues = {\n    id:\"\",\n    company:\"\",\n    name: \"\",\n    email: \"\",\n    mobile: \"\",\n    address: \"\",\n  };\n\n  const handleCompanyChange = (event) => {\n   setSelectedCompany(event.target.value);\n   \n  };\n\n  const handleIdChange = (event) => {\n    setSelectedId(event.target.value);\n   };\n\n   const handleNameChange = (event,setFieldValue) => {\n    setFieldValue(\"name\",event);\n\n   };\n\n   const handleAddressChange = (event) => {\n    setAddressValue(event.target.value);\n   };\n\n\n\n\n  const handleEmailAutocomplete = (event, newValue) => {\n        if (typeof newValue === \"string\") {\n\n          setSelectedId(newValue.id);\n          setSelectedCompany(newValue.company);\n          setNameValue(newValue.name);\n          setSelectedEmail(newValue.email);\n          setSelectedMobile(newValue.mobile);\n          setAddressValue(newValue.address);\n          \n        } else if (newValue && newValue.inputValue) {\n          setSelectedEmail(newValue.inputValue);\n        } else {\n          setSelectedId(newValue?newValue.id:null);\n          setSelectedCompany(newValue?newValue.company:null);\n          setNameValue(newValue?newValue.name:null);\n          setSelectedEmail(newValue?newValue.email:null);\n          setSelectedMobile(newValue?newValue.mobile:null);\n          setAddressValue(newValue?newValue.address:null); \n        }\n      };\n\n\n      const handleMobileAutocomplete = (event, newValue) => {\n        if (typeof newValue === \"string\") {\n\n          setSelectedId(newValue.id);\n          setSelectedCompany(newValue.company);\n          setNameValue(newValue.name);\n          setSelectedEmail( newValue.email);\n          setSelectedMobile(newValue.mobile);\n          setAddressValue(newValue.address);\n          \n        } else if (newValue && newValue.inputValue) {\n          setSelectedMobile(newValue.inputValue);\n             \n        } else {\n          setSelectedId(newValue?newValue.id:null);\n          setSelectedCompany(newValue?newValue.company:null);\n          setNameValue(newValue?newValue.name:null);\n          setSelectedEmail(newValue?newValue.email:null);\n          setSelectedMobile(newValue?newValue.mobile:null);\n          setAddressValue(newValue?newValue.address:null); \n        }\n      };\n\n\n\n\n    return (\n      <div>\n       <Formik\n            initialValues={initialValues}\n              validationSchema={customerCreateSchema}\n              onSubmit={(values, { setSubmitting }) => {\n              setTimeout(() => {\n                dispatch(createCustomer(values));\n                setSubmitting(false);\n                setResult(true);\n              }, 2000);\n\n\n            }}\n          >{\n               ({\n              submitForm,\n              isSubmitting,\n              handleChange,\n              resetForm,\n              touched,\n              errors,\n              values,\n              setFieldValue\n            \n            }) => ( \n              <div>\n<Form>\n<Grid container  justify=\"center\" alignItems=\"center\" item xs={12}>\n<Grid item xs={12} md={2}>\n\n\n\n\n<Autocomplete\n        id=\"id\"\n        name=\"id\"\n        freeSolo\n        value={values.id?values.id.toString():null}\n        options={customerList.customers}\n        getOptionLabel={(option) => {\n                      \n          if (typeof option === \"string\") {\n            return option;\n          }\n          \n          if (option.inputValue) {\n            return option.inputValue;\n          }\n          \n          return option.id.toString();\n        }}\n\n        renderOption={(option) => option.id.toString()}\n\n\n        onChange={  (event, newValue) => {\n          if (typeof newValue === \"string\") {\n            setFieldValue('id',newValue.id,true)\n            setFieldValue('company',newValue.company,true)\n            setFieldValue('address',newValue.address,true)\n            setFieldValue('name',newValue.name,true)\n            setFieldValue('email',newValue.email,true)\n            setFieldValue('mobile',newValue.mobile,true)          \n          } else if (newValue && newValue.inputValue) {\n            setFieldValue('id',newValue.inputValue,true)\n          } else {\n            setFieldValue('id',newValue?newValue.id:null,true)\n            setFieldValue('company',newValue?newValue.company:null,true)\n            setFieldValue('address',newValue?newValue.address:null,true)\n            setFieldValue('name',newValue?newValue.name:null,true)\n            setFieldValue('email',newValue?newValue.email:null,true)\n            setFieldValue('mobile',newValue?newValue.mobile:null,true)\n    \n          } }}\n\n\n\n\n\n        \n        renderInput={(params) => (\n          <TextField {...params} label=\"ID\" margin=\"normal\" variant=\"outlined\" />\n        )}\n      />\n\n      </Grid>\n      <Grid item xs={12} md={2}>\n      <FormControl variant=\"outlined\" fullWidth>\n        <InputLabel id=\"company\">COMPANY</InputLabel>\n        <Select\n          labelId=\"company\"\n          id=\"company\"\n          name=\"company\"\n          value={values.company||\"\"}\n          onChange={handleChange}\n          label=\"COMPANY\"\n          isSearchable={true} >\n          <MenuItem value={\"\"}><em>Select Null</em></MenuItem>\n          <MenuItem value={1}>Teraret Managed Cloud</MenuItem>\n        </Select>\n      </FormControl>\n      \n      </Grid>\n      <Grid item sm={12} md={2}>\n                  <TextField\n                    id=\"name\"\n                    name=\"name\"\n                    label=\"Name\"\n                    autoComplete=\"new-password\"\n                    value={values.name||\"\"}\n                    onChange={e => {\n                    setFieldValue('name',e.target.value,true)\n                  }}\n                    style={{ margin: 8 }}\n                    placeholder=\"Name\"\n                    margin=\"normal\"\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    InputProps={{\n                      startAdornment: (\n                        <InputAdornment position=\"start\">\n                          <Contacts />\n                        </InputAdornment>\n                      ),\n                    }}\n                    variant=\"outlined\"\n                    helperText={\n                      errors.name && touched.name ? errors.name : null\n                    }\n                  />\n                  </Grid>\n  \n  \n<Grid item xs={12} md={2}>\n  <Searchautocomplete label=\"E-MAIL\" name=\"email\" value={values.email||\"\"}  onChange={(event, newValue) => {\n        if (typeof newValue === \"string\") {\n          setFieldValue('id',newValue.id.toString(),true)\n          setFieldValue('company',newValue.company,true)\n          setFieldValue('address',newValue.address,true)\n          setFieldValue('name',newValue.name,true)\n          setFieldValue('email',newValue.email,true)\n          setFieldValue('mobile',newValue.mobile,true)          \n        } else if (newValue && newValue.inputValue) {\n          setFieldValue('email',newValue.inputValue,true)\n        } else {\n          setFieldValue('id',newValue?newValue.id:null,true)\n          setFieldValue('company',newValue?newValue.company:null,true)\n          setFieldValue('address',newValue?newValue.address:null,true)\n          setFieldValue('name',newValue?newValue.name:null,true)\n          setFieldValue('email',newValue?newValue.email:null,true)\n          setFieldValue('mobile',newValue?newValue.mobile:null,true)\n  \n        } }} \n\n        \n        \n        options={customerList}  helperText={errors.email && touched.email ? errors.email : null} />\n</Grid>\n<Grid item xs={12} md={2}>\n  <Searchautocomplete label=\"MOBILE\" name=\"mobile\" value={values.mobile||\"\"}  onChange={(event, newValue) => {\n        if (typeof newValue === \"string\") {\n          setFieldValue('id',newValue.id.toString(),true)\n          setFieldValue('company',newValue.company,true)\n          setFieldValue('address',newValue.address,true)\n          setFieldValue('name',newValue.name,true)\n          setFieldValue('email',newValue.email,true)\n          setFieldValue('mobile',newValue.mobile,true)          \n        } else if (newValue && newValue.inputValue) {\n          setFieldValue('mobile',newValue.inputValue,true)\n        } else {\n          setFieldValue('id',newValue?newValue.id:null,true)\n          setFieldValue('company',newValue?newValue.company:null,true)\n          setFieldValue('address',newValue?newValue.address:null,true)\n          setFieldValue('name',newValue?newValue.name:null,true)\n          setFieldValue('email',newValue?newValue.email:null,true)\n          setFieldValue('mobile',newValue?newValue.mobile:null,true)\n  \n        } }}  options={customerList}  helperText={errors.mobile && touched.mobile ? errors.mobile : null} />\n</Grid>\n  <Grid item sm={12} md={2}>\n                  <TextField\n                    id=\"outlined-full-width\"\n                    label=\"Address\"\n                    name=\"address\"\n                    value={values.address||\"\"}\n                    onChange={handleChange}\n                    style={{ margin: 8 }}\n                    placeholder=\"Address\"\n                    margin=\"normal\"\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    InputProps={{\n                      startAdornment: (\n                        <InputAdornment position=\"start\">\n                          <Home />\n                        </InputAdornment>\n                      ),\n                    }}\n                    variant=\"outlined\"\n                    helperText={\n                      errors.address && touched.address ? errors.address : null\n                    }\n                  />\n                  </Grid>\n\n    \n       <Grid item xs={12}>\n                  {isSubmitting && <LinearProgress />}\n                  <ButtonGroup>\n                    <Button\n                      variant=\"contained\"\n                      size=\"large\"\n                      color=\"primary\"\n                      disabled={isSubmitting}\n                      onClick={submitForm}\n                    >\n                      Save\n                    </Button>\n                    <Button\n                      variant=\"contained\"\n                      size=\"large\"\n                      color=\"secondary\"\n                      onClick={resetForm}\n                    >\n                      Reset\n                    </Button>\n                  </ButtonGroup>\n                </Grid>\n                </Grid>\n\n                {error ? (\n                  <Collapse in={result}>\n                    <Alert severity=\"error\">\n                      <Grid\n                        container\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"center\"\n                      >\n                        {error} <Button onClick={done}>ok</Button>\n                      </Grid>\n                    </Alert>\n                  </Collapse>\n                ) : null}\n\n\n\n\n                </Form>\n\n    </div>\n\n    \n    \n    )\n    }\n    </Formik>\n\n\n\n    </div>\n    );\n}\nexport default CustomerSearch;","import React from \"react\";\n\nimport advancedgrails from \"./images/buy.svg\";\nimport documentation from \"./images/sell.svg\";\nimport slack from \"./images/repair.svg\";\nimport { Row } from \"reactstrap\";\n\nconst Footer = () => {\n  return (\n    <Row className=\"footer\" key={3}>\n      <div className=\"col-md-4\">\n        <a\n          href=\"http://guides.grails.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img\n            src={advancedgrails}\n            alt=\"Grails Guides\"\n            className=\"float-left\"\n          />\n        </a>\n        <strong className=\"centered\">\n          <a\n            href=\"http://guides.grails.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Buy\n          </a>\n        </strong>\n        <p>You can Buy Laptops,Desktops,Server,Network Equipments and Etc</p>\n      </div>\n      <div className=\"col-md-4\">\n        <a\n          href=\"http://docs.grails.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img\n            src={documentation}\n            alt=\"Grails Documentation\"\n            className=\"float-left\"\n          />\n        </a>\n        <strong className=\"centered\">\n          <a\n            href=\"http://docs.grails.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Sell\n          </a>\n        </strong>\n        <p>Sell your Laptops,Desktops,Projector,Network equipment,Led TV.</p>\n      </div>\n\n      <div className=\"col-md-4\">\n        <a\n          href=\"https://grails-slack.cfapps.io\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img src={slack} alt=\"Slack Guides\" className=\"float-left\" />\n        </a>\n        <strong className=\"centered\">\n          <a\n            href=\"https://grails-slack.cfapps.io\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Repair\n          </a>\n        </strong>\n        <p>\n          Door step pickup and Drop for Laptop,Desktop,Projector,CCTV and\n          Network Equipment\n        </p>\n      </div>\n    </Row>\n  );\n};\n\nexport default Footer;\n","import {\n  FETCH_CUSTOMERS_REQUEST,\n  FETCH_CUSTOMERS_SUCCESS,\n  FETCH_CUSTOMERS_FAILURE,\n} from \"./customerType\";\n\nconst initialState = {\n  loading: false,\n  customers: [],\n  offset: 0,\n  sort: \"id\",\n  order: \"asc\",\n  max: 10,\n  error: \"\",\n};\n\nconst customerReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_CUSTOMERS_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      };\n    case FETCH_CUSTOMERS_SUCCESS:\n      return {\n        loading: false,\n        sort: action.payloadsort,\n        order: action.payloadorder,\n        max: action.payloadmax,\n        offset: action.payloadoffset + 10,\n        customers: action.payload,\n        count: action.payloadcount,\n        page: action.payloadpage,\n        totalpages: action.payloadtotalpages,\n        error: \"\",\n      };\n\n    case FETCH_CUSTOMERS_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default customerReducer;\n","import {\n  FETCH_CUSTOMER_REQUEST,\n  FETCH_CUSTOMER_SUCCESS,\n  FETCH_CUSTOMER_FAILURE,\n} from \"./customerCreateType\";\n\nconst initialState = {\n  loading: false,\n  show: {},\n  error: \"\",\n};\n\nconst customerCreateReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_CUSTOMER_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      };\n    case FETCH_CUSTOMER_SUCCESS:\n      return {\n        loading: false,\n        show: action.payload,\n        error: \"\",\n      };\n    case FETCH_CUSTOMER_FAILURE:\n      return {\n        loading: false,\n        show: {},\n        error: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default customerCreateReducer;\n","import { combineReducers } from \"redux\";\nimport customerReducer from \"./customer/customerReducer\";\nimport customerCreateReducer from \"./customer/customerCreateReducer\";\n\nconst rootReducer = combineReducers({\n  customer: customerReducer,\n  customerCreate: customerCreateReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducers from \"./rootReducers\";\nimport logger from \"redux-logger\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst store = createStore(\n  rootReducers,\n  composeWithDevTools(applyMiddleware(logger, thunk))\n);\n\nexport default store;\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport AppNav from \"./AppNav\";\nimport App from \"./App\";\nimport Customer from \"./page/customer/Customer\";\nimport CustomerSearch from \"./page/customer/CustomerSearch\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./css/App.css\";\nimport \"./css/grails.css\";\nimport \"./css/main.css\";\nimport { Route, HashRouter, Switch } from \"react-router-dom\";\nimport Footer from \"./Footer\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nfunction Index() {\n  const [collapse, setCollapse] = useState(false);\n\n  const toggle = () => {\n    setCollapse(!collapse);\n  };\n\n  return (\n    <HashRouter>\n      <AppNav collapse={collapse} toggle={toggle} key={0} />\n      <Switch>\n        <Route exact path=\"/\">\n          <App />\n        </Route>\n        <Route exact path=\"/customer\">\n          <Customer />\n        </Route>\n        <Route exact path=\"/customer/search\">\n          <CustomerSearch />\n        </Route>\n      </Switch>\n      <Footer key={3} />\n    </HashRouter>\n  );\n}\n\nReactDOM.render(\n  <Provider store={store}>\n    <Index />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}